
// File auto-generated by Padrick unknown
module pulpissimo_padframe
  import pkg_pulpissimo_padframe::*;
#(
  parameter int unsigned   AW = 32,
  parameter int unsigned   DW = 32,
  parameter type req_t = logic, // reg_interface request type
  parameter type resp_t = logic, // reg_interface response type
  parameter logic [DW-1:0] DecodeErrRespData = 32'hdeadda7a,
  localparam int unsigned NGPIO = 32
)(
  input logic                                clk_i,
  input logic                                rst_ni,
  output static_connection_signals_pad2soc_t static_connection_signals_pad2soc,
  input  static_connection_signals_soc2pad_t static_connection_signals_soc2pad,
  output port_signals_pad2soc_t              port_signals_pad2soc,
  input port_signals_soc2pad_t               port_signals_soc2pad,
  // Landing Pads
  inout wire logic                           pad_ref_clk,
  inout wire logic                           pad_clk_byp_en,
  inout wire logic                           pad_reset_n,
  inout wire logic                           pad_bootsel0,
  inout wire logic                           pad_bootsel1,
  inout wire logic                           pad_jtag_tck,
  inout wire logic                           pad_jtag_trstn,
  inout wire logic                           pad_jtag_tms,
  inout wire logic                           pad_jtag_tdi,
  inout wire logic                           pad_jtag_tdo,
  inout wire logic                           pad_hyper_csn0,
  inout wire logic                           pad_hyper_csn1,
  inout wire logic                           pad_hyper_reset_n,
  inout wire logic                           pad_hyper_ck,
  inout wire logic                           pad_hyper_ckn,
  inout wire logic                           pad_hyper_dq0,
  inout wire logic                           pad_hyper_dq1,
  inout wire logic                           pad_hyper_dq2,
  inout wire logic                           pad_hyper_dq3,
  inout wire logic                           pad_hyper_dq4,
  inout wire logic                           pad_hyper_dq5,
  inout wire logic                           pad_hyper_dq6,
  inout wire logic                           pad_hyper_dq7,
  inout wire logic                           pad_hyper_rwds,
  inout wire [NGPIO-1:0]                     pad_io,
  // Config Interface
  input req_t                                config_req_i,
  output resp_t                              config_rsp_o
  );


  req_t all_pads_config_req;
  resp_t all_pads_config_resp;
  pulpissimo_padframe_all_pads #(
    .req_t(req_t),
    .resp_t(resp_t)
  ) i_all_pads (
   .clk_i,
   .rst_ni,
   .static_connection_signals_pad2soc(static_connection_signals_pad2soc.all_pads),
   .static_connection_signals_soc2pad(static_connection_signals_soc2pad.all_pads),
   .port_signals_pad2soc_o(port_signals_pad2soc.all_pads),
   .port_signals_soc2pad_i(port_signals_soc2pad.all_pads),
   .pad_pad_ref_clk_pad(pad_ref_clk),
   .pad_pad_clk_byp_en_pad(pad_clk_byp_en),
   .pad_pad_reset_n_pad(pad_reset_n),
   .pad_pad_bootsel0_pad(pad_bootsel0),
   .pad_pad_bootsel1_pad(pad_bootsel1),
   .pad_pad_jtag_tck_pad(pad_jtag_tck),
   .pad_pad_jtag_trstn_pad(pad_jtag_trstn),
   .pad_pad_jtag_tms_pad(pad_jtag_tms),
   .pad_pad_jtag_tdi_pad(pad_jtag_tdi),
   .pad_pad_jtag_tdo_pad(pad_jtag_tdo),
   .pad_pad_hyper_csn0_pad(pad_hyper_csn0),
   .pad_pad_hyper_csn1_pad(pad_hyper_csn1),
   .pad_pad_hyper_reset_n_pad(pad_hyper_reset_n),
   .pad_pad_hyper_ck_pad(pad_hyper_ck),
   .pad_pad_hyper_ckn_pad(pad_hyper_ckn),
   .pad_pad_hyper_dq0_pad(pad_hyper_dq0),
   .pad_pad_hyper_dq1_pad(pad_hyper_dq1),
   .pad_pad_hyper_dq2_pad(pad_hyper_dq2),
   .pad_pad_hyper_dq3_pad(pad_hyper_dq3),
   .pad_pad_hyper_dq4_pad(pad_hyper_dq4),
   .pad_pad_hyper_dq5_pad(pad_hyper_dq5),
   .pad_pad_hyper_dq6_pad(pad_hyper_dq6),
   .pad_pad_hyper_dq7_pad(pad_hyper_dq7),
   .pad_pad_hyper_rwds_pad(pad_hyper_rwds),
   .pad_pad_io00_pad(pad_io[0]),
   .pad_pad_io01_pad(pad_io[1]),
   .pad_pad_io02_pad(pad_io[2]),
   .pad_pad_io03_pad(pad_io[3]),
   .pad_pad_io04_pad(pad_io[4]),
   .pad_pad_io05_pad(pad_io[5]),
   .pad_pad_io06_pad(pad_io[6]),
   .pad_pad_io07_pad(pad_io[7]),
   .pad_pad_io08_pad(pad_io[8]),
   .pad_pad_io09_pad(pad_io[9]),
   .pad_pad_io10_pad(pad_io[10]),
   .pad_pad_io11_pad(pad_io[11]),
   .pad_pad_io12_pad(pad_io[12]),
   .pad_pad_io13_pad(pad_io[13]),
   .pad_pad_io14_pad(pad_io[14]),
   .pad_pad_io15_pad(pad_io[15]),
   .pad_pad_io16_pad(pad_io[16]),
   .pad_pad_io17_pad(pad_io[17]),
   .pad_pad_io18_pad(pad_io[18]),
   .pad_pad_io19_pad(pad_io[19]),
   .pad_pad_io20_pad(pad_io[20]),
   .pad_pad_io21_pad(pad_io[21]),
   .pad_pad_io22_pad(pad_io[22]),
   .pad_pad_io23_pad(pad_io[23]),
   .pad_pad_io24_pad(pad_io[24]),
   .pad_pad_io25_pad(pad_io[25]),
   .pad_pad_io26_pad(pad_io[26]),
   .pad_pad_io27_pad(pad_io[27]),
   .pad_pad_io28_pad(pad_io[28]),
   .pad_pad_io29_pad(pad_io[29]),
   .pad_pad_io30_pad(pad_io[30]),
   .pad_pad_io31_pad(pad_io[31]),
   .config_req_i(all_pads_config_req),
   .config_rsp_o(all_pads_config_resp)
  );


   localparam int unsigned NUM_PAD_DOMAINS = 1;
   localparam int unsigned REG_ADDR_WIDTH = 9;
   typedef struct packed {
      int unsigned idx;
      logic [REG_ADDR_WIDTH-1:0] start_addr;
      logic [REG_ADDR_WIDTH-1:0] end_addr;
   } addr_rule_t;

   localparam addr_rule_t[NUM_PAD_DOMAINS-1:0] ADDR_DEMUX_RULES = '{
     '{ idx: 0, start_addr: 9'd0,  end_addr: 9'd260}
     };
   logic[$clog2(NUM_PAD_DOMAINS+1)-1:0] pad_domain_sel; // +1 since there is an additional error slave
   addr_decode #(
       .NoIndices(NUM_PAD_DOMAINS+1),
       .NoRules(NUM_PAD_DOMAINS),
       .addr_t(logic[REG_ADDR_WIDTH-1:0]),
       .rule_t(addr_rule_t)
     ) i_addr_decode(
       .addr_i(config_req_i.addr[REG_ADDR_WIDTH-1:0]),
       .addr_map_i(ADDR_DEMUX_RULES),
       .dec_valid_o(),
       .dec_error_o(),
       .idx_o(pad_domain_sel),
       .en_default_idx_i(1'b1),
       .default_idx_i(1'd1) // The last entry is the error slave
     );

     req_t error_slave_req;
     resp_t error_slave_rsp;

     // Config Interface demultiplexing
     reg_demux #(
       .NoPorts(NUM_PAD_DOMAINS+1), //+1 for the error slave
       .req_t(req_t),
       .rsp_t(resp_t)
     ) i_config_demuxer (
       .clk_i,
       .rst_ni,
       .in_select_i(pad_domain_sel),
       .in_req_i(config_req_i),
       .in_rsp_o(config_rsp_o),
       .out_req_o({error_slave_req, all_pads_config_req}),
       .out_rsp_i({error_slave_rsp, all_pads_config_resp})
     );

     assign error_slave_rsp.error = 1'b1;
     assign error_slave_rsp.rdata = DecodeErrRespData;
     assign error_slave_rsp.ready = 1'b1;

endmodule
